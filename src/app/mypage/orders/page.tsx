'use client';

import { useState, useEffect, useCallback } from 'react';
import Nav from '../../../components/layouts/nav';
// import CategoryFilter from '@/src/components/ui/categoryFilter';
import OrderHeaderSection from '@/src/components/orderHeaderSection';
import OrderItemList from '@/src/components/orderItemList';
import MypageContainer from '@/src/components/mypageContainer';
import { useAuth } from '@/src/contexts/authContext';
import { useRouter } from 'next/navigation';
import OrderDetailExpanded from '@/src/components/orderDetailExpanded';

interface OrderItem {
  id: string;
  panel_info: {
    address: string;
    nickname?: string;
    panel_status: string;
    region_dong?: string;
    max_banner?: number;
    first_half_closure_quantity?: number;
    second_half_closure_quantity?: number;
  };
  slot_info: {
    slot_name: string;
    banner_type: string;
    price_unit: string;
  };
  quantity: number;
  unit_price: number;
  total_price: number;
  start_date: string;
  end_date: string;
  price_display?: string;
}

interface Order {
  id: string;
  order_number: string;
  total_amount: number;
  status: string;
  payment_status: string;
  order_date: string;
  year_month?: string;
  order_items: OrderItem[];
}

interface OrdersResponse {
  success: boolean;
  orders: Order[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
  statusSummary: {
    total: number;
    pending: number;
    confirmed: number;
    completed: number;
  };
  error?: string;
}

interface OrderDetail {
  id: string;
  order_number: string;
  title: string;
  location: string;
  status: string;
  category: string;
  customerName: string;
  phone: string;
  companyName: string;
  productName: string;
  price: number;
  vat: number;
  designFee: number;
  roadUsageFee: number;
  totalAmount: number;
  paymentMethod: string;
  depositorName: string;
  orderDate: string;
  canCancel: boolean;
  daysSinceOrder: number;
  panel_slot_snapshot?: {
    id: string | null;
    notes: string | null;
    max_width: number | null;
    slot_name: string | null;
    tax_price: number | null;
    created_at: string | null;
    max_height: number | null;
    price_unit: string | null;
    updated_at: string | null;
    banner_type: string | null;
    slot_number: number | null;
    total_price: number | null;
    panel_info_id: string | null;
    road_usage_fee: number | null;
    advertising_fee: number | null;
    panel_slot_status: string | null;
  };
  panel_slot_usage_id?: string;
}

export default function OrdersPage() {
  const [activeTab] = useState('Ï£ºÎ¨∏ÎÇ¥Ïó≠');
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [statusSummary, setStatusSummary] = useState({
    total: 0,
    pending: 0,
    confirmed: 0,
    completed: 0,
  });
  // ÎÇ†Ïßú/ÏúÑÏπò ÌïÑÌÑ∞ state
  const [startDate, setStartDate] = useState(() => {
    const today = new Date();
    return today.toISOString().split('T')[0]; // YYYY-MM-DD ÌòïÏãù
  });
  const [endDate, setEndDate] = useState(() => {
    const today = new Date();
    return today.toISOString().split('T')[0]; // YYYY-MM-DD ÌòïÏãù
  });
  const [searchLocation, setSearchLocation] = useState('');

  // Ïã§Ï†ú Í≤ÄÏÉâÏóê ÏÇ¨Ïö©Ìï† ÌïÑÌÑ∞ ÏÉÅÌÉú (Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑ ÎïåÎßå ÏóÖÎç∞Ïù¥Ìä∏)
  const [activeStartDate, setActiveStartDate] = useState(() => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  });
  const [activeEndDate, setActiveEndDate] = useState(() => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  });
  const [activeSearchLocation, setActiveSearchLocation] = useState('');

  // ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í¥ÄÎ†® state
  const [selectedOrderDetail, setSelectedOrderDetail] =
    useState<OrderDetail | null>(null);
  const [detailLoading, setDetailLoading] = useState(false);
  const [expandedItemId, setExpandedItemId] = useState<number | null>(null);

  const { user, loading: authLoading } = useAuth();
  const router = useRouter();

  const fetchOrders = useCallback(async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/orders?page=${currentPage}&limit=10`);
      const data: OrdersResponse = await response.json();

      if (data.success) {
        setOrders(data.orders);
        setStatusSummary(data.statusSummary);
      } else {
        setError(data.error || 'Ï£ºÎ¨∏ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        console.log(error);
      }
    } catch {
      setError('Ï£ºÎ¨∏ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  }, [currentPage, error]);

  useEffect(() => {
    if (authLoading) return;

    if (!user) {
      router.push('/signin');
      return;
    }

    fetchOrders();
  }, [user, authLoading, fetchOrders, router]);

  const handleOrderClick = async (orderNumber: string) => {
    console.log('Ï£ºÎ¨∏ ÌÅ¥Î¶≠Îê®:', orderNumber);
    try {
      setDetailLoading(true);
      const response = await fetch(`/api/orders/${orderNumber}`);
      const data = await response.json();

      if (data.success) {
        console.log('Ï£ºÎ¨∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î°úÎìú ÏÑ±Í≥µ:', data.orderDetail);
        setSelectedOrderDetail(data.orderDetail);
        console.log('selectedOrderDetail ÏÉÅÌÉú ÏÑ§Ï†ïÎê®');
      } else {
        console.error('Ï£ºÎ¨∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', data.error);
      }
    } catch (error) {
      console.error('Ï£ºÎ¨∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
    } finally {
      setDetailLoading(false);
    }
  };

  const handleExpandItem = async (itemId: number | null) => {
    if (itemId === null) {
      // Îã´Í∏∞
      setExpandedItemId(null);
      setSelectedOrderDetail(null);
      return;
    }

    // Ìï¥Îãπ ÏïÑÏù¥ÌÖúÏùò Ï£ºÎ¨∏ Ï†ïÎ≥¥ Ï∞æÍ∏∞
    const item = orders.find((item) => item.id === itemId);
    if (item && item.id) {
      // console.log('ÏïÑÏù¥ÌÖú ÌôïÏû•:', itemId, 'Ï£ºÎ¨∏Î≤àÌò∏:', item.order_number);
      await handleOrderClick(item.order_number);
      setExpandedItemId(itemId);
    }
  };

  const handleCloseDetail = () => {
    console.log('ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Îã´Í∏∞');
    setSelectedOrderDetail(null);
    setExpandedItemId(null);
  };

  // Ï†ÑÏ≤¥Î≥¥Í∏∞ Ìï®Ïàò
  const handleShowAll = () => {
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    setStartDate(todayStr);
    setEndDate(todayStr);
    setSearchLocation('');
    // Ïã§Ï†ú Í≤ÄÏÉâ ÏÉÅÌÉúÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
    setActiveStartDate(todayStr);
    setActiveEndDate(todayStr);
    setActiveSearchLocation('');
  };

  // Í∏∞Í∞Ñ Í≤ÄÏÉâ Ìï®Ïàò
  const handlePeriodSearch = () => {
    // Í∏∞Í∞Ñ Í≤ÄÏÉâÎßå ÌôúÏÑ±ÌôîÌïòÍ≥† Îèô Í≤ÄÏÉâÏùÄ ÎπÑÌôúÏÑ±Ìôî
    setSearchLocation('');
    // Ïã§Ï†ú Í≤ÄÏÉâ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setActiveStartDate(startDate);
    setActiveEndDate(endDate);
    setActiveSearchLocation('');

    console.log('üîç Í∏∞Í∞Ñ Í≤ÄÏÉâ Ïã§Ìñâ:', {
      startDate,
      endDate,
      activeStartDate: startDate,
      activeEndDate: endDate,
    });
  };

  // Îèô Í≤ÄÏÉâ Ìï®Ïàò
  const handleLocationSearch = () => {
    // Îèô Í≤ÄÏÉâÎßå ÌôúÏÑ±ÌôîÌïòÍ≥† Í∏∞Í∞Ñ Í≤ÄÏÉâÏùÄ ÎπÑÌôúÏÑ±Ìôî (ÏãúÏûëÏùºÍ≥º Ï¢ÖÎ£åÏùºÏùÑ Í∞ôÍ≤å)
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    setStartDate(todayStr);
    setEndDate(todayStr);
    // Ïã§Ï†ú Í≤ÄÏÉâ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setActiveStartDate(todayStr);
    setActiveEndDate(todayStr);
    setActiveSearchLocation(searchLocation);
  };

  // Ï£ºÎ¨∏ Ï∑®ÏÜå Ìï∏Îì§Îü¨
  const handleCancelOrder = (item: { id: number; orderId?: string }) => {
    if (!item.orderId) return;

    // Ï£ºÎ¨∏ Î™©Î°ùÏóêÏÑú Ìï¥Îãπ ÏïÑÏù¥ÌÖú Ï†úÍ±∞ (Ïã§Ï†ú Ï£ºÎ¨∏ IDÎ°ú ÌïÑÌÑ∞ÎßÅ)
    setOrders((prevOrders) =>
      prevOrders.filter((order) => order.id !== item.orderId)
    );

    // ÏÉÅÌÉú ÏöîÏïΩ ÏóÖÎç∞Ïù¥Ìä∏ (pending ÏÉÅÌÉúÏù∏ Ï£ºÎ¨∏Ïù¥ Ï∑®ÏÜåÎêòÎØÄÎ°ú pending Í∞úÏàò Í∞êÏÜå)
    setStatusSummary((prev) => ({
      ...prev,
      pending: Math.max(0, prev.pending - 1),
      total: Math.max(0, prev.total - 1),
    }));
  };

  // Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞Î•º OrderItemList Ïª¥Ìè¨ÎÑåÌä∏ ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
  const transformOrdersForDisplay = () => {
    let globalIndex = 1; // Ï†ÑÏó≠ Ïù∏Îç±Ïä§Î°ú Í≥†Ïú†Ìïú Ïà´Ïûê ID ÏÉùÏÑ±
    const transformed = orders.flatMap((order) =>
      order.order_items.map((item) => ({
        id: globalIndex++, // Í≥†Ïú†Ìïú Ïà´Ïûê ID ÏÉùÏÑ±
        title: item.panel_info.nickname || item.panel_info.address,
        subtitle: `(${item.slot_info.banner_type})`,
        location: item.panel_info.region_dong || item.panel_info.address, // region_dong Ïö∞ÏÑ† ÏÇ¨Ïö©
        status: getStatusDisplay(order.status),
        category: item.slot_info.banner_type,
        orderNumber: order.order_number,
        totalAmount:
          item.price_display || order.total_amount.toLocaleString() + 'Ïõê',
        startDate: item.start_date,
        endDate: item.end_date,
        orderId: order.id, // Ïã§Ï†ú Ï£ºÎ¨∏ IDÎ•º orderIdÎ°ú ÏÑ§Ï†ï
      }))
    );

    console.log(
      'üîç Î≥ÄÌôòÎêú Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞:',
      transformed.map((item) => ({
        orderNumber: item.orderNumber,
        startDate: item.startDate,
        endDate: item.endDate,
        title: item.title,
      }))
    );

    return transformed;
  };

  const getStatusDisplay = (status: string) => {
    switch (status) {
      case 'pending':
        return 'ÏûÖÍ∏àÌôïÏù∏ Ï§ë';
      case 'confirmed':
        return 'Í≤∞Ï†úÏôÑÎ£å';
      case 'completed':
        return 'ÏôÑÎ£å';
      case 'cancelled':
        return 'Ï∑®ÏÜå';
      default:
        return status;
    }
  };

  // ÌïÑÌÑ∞ÎßÅÎêú Ï£ºÎ¨∏ Î™©Î°ù
  const filteredOrders = transformOrdersForDisplay().filter((item) => {
    // Í≤ÄÏÉâ Ï°∞Í±¥Ïù¥ ÏóÜÏúºÎ©¥ Ï†ÑÏ≤¥Î≥¥Í∏∞
    if (!activeSearchLocation && activeStartDate === activeEndDate) {
      return true;
    }

    let isDateInRange = true;
    let isLocationMatch = true;

    // ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅ (Í¥ëÍ≥† Í≤åÏãú Í∏∞Í∞ÑÏù¥ ÏÑ†ÌÉùÌïú Í∏∞Í∞ÑÍ≥º Í≤πÏπòÎäîÏßÄ ÌôïÏù∏)
    if (activeStartDate !== activeEndDate) {
      console.log('üîç ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅ ÏãúÏûë:', {
        itemStartDate: item.startDate,
        itemEndDate: item.endDate,
        searchStart: activeStartDate,
        searchEnd: activeEndDate,
        orderNumber: item.orderNumber,
        title: item.title,
      });

      // ÎÇ†Ïßú Î¨∏ÏûêÏó¥Ïù¥ Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏
      if (item.startDate && item.endDate) {
        // ÎÇ†Ïßú ÌååÏã±ÏùÑ Îçî ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
        const parseDate = (dateStr: string) => {
          try {
            // ISO ÌòïÏãù (YYYY-MM-DD) ÎòêÎäî Îã§Î•∏ ÌòïÏãù Ï≤òÎ¶¨
            if (dateStr.includes('T')) {
              return new Date(dateStr);
            } else {
              // YYYY-MM-DD ÌòïÏãùÏù∏ Í≤ΩÏö∞
              return new Date(dateStr + 'T00:00:00');
            }
          } catch (error) {
            console.error('ÎÇ†Ïßú ÌååÏã± Ïò§Î•ò:', { dateStr, error });
            return new Date('Invalid Date');
          }
        };

        const itemStartDate = parseDate(item.startDate);
        const itemEndDate = parseDate(item.endDate);
        const searchStart = parseDate(activeStartDate);
        const searchEnd = parseDate(activeEndDate);

        console.log('üîç ÎÇ†Ïßú Í∞ùÏ≤¥ Î≥ÄÌôò Í≤∞Í≥º:', {
          originalItemStartDate: item.startDate,
          originalItemEndDate: item.endDate,
          originalSearchStart: activeStartDate,
          originalSearchEnd: activeEndDate,
          itemStartDate: itemStartDate.toString(),
          itemEndDate: itemEndDate.toString(),
          searchStart: searchStart.toString(),
          searchEnd: searchEnd.toString(),
          itemStartTime: itemStartDate.getTime(),
          itemEndTime: itemEndDate.getTime(),
          searchStartTime: searchStart.getTime(),
          searchEndTime: searchEnd.getTime(),
        });

        // ÎÇ†ÏßúÍ∞Ä Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏
        const isValidDate = (date: Date) => {
          return date instanceof Date && !isNaN(date.getTime());
        };

        if (
          isValidDate(itemStartDate) &&
          isValidDate(itemEndDate) &&
          isValidDate(searchStart) &&
          isValidDate(searchEnd)
        ) {
          // Í¥ëÍ≥† Í∏∞Í∞ÑÏù¥ Í≤ÄÏÉâ Í∏∞Í∞ÑÍ≥º Í≤πÏπòÎäîÏßÄ ÌôïÏù∏ (from-to ÏÇ¨Ïù¥Ïùò Í∏∞Í∞Ñ)
          isDateInRange =
            itemStartDate <= searchEnd && itemEndDate >= searchStart;
          console.log('üîç ÎÇ†Ïßú Î≤îÏúÑ Í≤∞Í≥º:', {
            isDateInRange,
            condition1: itemStartDate <= searchEnd,
            condition2: itemEndDate >= searchStart,
            orderNumber: item.orderNumber,
          });
        } else {
          console.log('üîç Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÎÇ†Ïßú:', {
            itemStartDate: itemStartDate.toString(),
            itemEndDate: itemEndDate.toString(),
            searchStart: searchStart.toString(),
            searchEnd: searchEnd.toString(),
            orderNumber: item.orderNumber,
            itemStartValid: isValidDate(itemStartDate),
            itemEndValid: isValidDate(itemEndDate),
            searchStartValid: isValidDate(searchStart),
            searchEndValid: isValidDate(searchEnd),
          });
          isDateInRange = false;
        }
      } else {
        console.log('üîç ÎÇ†Ïßú Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå:', {
          startDate: item.startDate,
          endDate: item.endDate,
          orderNumber: item.orderNumber,
        });
        isDateInRange = false;
      }
    }

    // ÏúÑÏπò ÌïÑÌÑ∞ÎßÅ (region_dongÏúºÎ°ú Í≤ÄÏÉâ)
    if (activeSearchLocation) {
      isLocationMatch = item.location
        .toLowerCase()
        .includes(activeSearchLocation.toLowerCase());
      console.log('üîç ÏúÑÏπò Í≤ÄÏÉâ:', {
        location: item.location,
        searchLocation: activeSearchLocation,
        isLocationMatch,
      });
    }

    // Í∏∞Í∞Ñ ÎòêÎäî ÎèôÏúºÎ°ú Í≤ÄÏÉâ (OR Ï°∞Í±¥)
    // Îëò Îã§ Ï°∞Í±¥Ïù¥ ÏûàÏúºÎ©¥ OR, ÌïòÎÇòÎßå ÏûàÏúºÎ©¥ Ìï¥Îãπ Ï°∞Í±¥Îßå Ï†ÅÏö©
    if (activeStartDate !== activeEndDate && activeSearchLocation) {
      return isDateInRange || isLocationMatch;
    } else if (activeStartDate !== activeEndDate) {
      return isDateInRange;
    } else if (activeSearchLocation) {
      return isLocationMatch;
    }

    return true; // Í≤ÄÏÉâ Ï°∞Í±¥Ïù¥ ÏóÜÏúºÎ©¥ Ï†ÑÏ≤¥Î≥¥Í∏∞
  });

  if (authLoading) {
    return <div>Î°úÎî© Ï§ë...</div>;
  }

  if (!user) {
    return null; // Î¶¨Îã§Ïù¥Î†âÌä∏ Ï§ë
  }

  return (
    <main className="min-h-screen flex flex-col bg-gray-100 w-full">
      <Nav variant="default" className="bg-white sm:px-0" />
      <MypageContainer activeTab={activeTab}>
        <OrderHeaderSection
          statusSummary={statusSummary}
          startDate={startDate}
          endDate={endDate}
          setStartDate={setStartDate}
          setEndDate={setEndDate}
          searchLocation={searchLocation}
          setSearchLocation={setSearchLocation}
          onShowAll={handleShowAll}
          onPeriodSearch={handlePeriodSearch}
          onLocationSearch={handleLocationSearch}
        />
        {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}

        {loading ? (
          <div className="text-center py-8">Ï£ºÎ¨∏ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
        ) : filteredOrders.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            Ï£ºÎ¨∏ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.
          </div>
        ) : (
          <>
            <OrderItemList
              items={filteredOrders}
              expandedItemId={expandedItemId}
              onExpandItem={handleExpandItem}
              onCancelOrder={handleCancelOrder}
              expandedContent={
                detailLoading ? (
                  <div className="text-center py-8">
                    Ï£ºÎ¨∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
                  </div>
                ) : selectedOrderDetail ? (
                  <div>
                    <div className="flex justify-between items-center mb-4 bg-black text-white">
                      <h3 className="text-lg font-semibold pl-5">
                        Ï£ºÎ¨∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
                      </h3>
                      <button
                        onClick={handleCloseDetail}
                        className="text-gray-1 hover:cursor-pointer pr-5 text-1.25"
                      >
                        ‚úï
                      </button>
                    </div>
                    <div className="p-3">
                      <OrderDetailExpanded orderDetail={selectedOrderDetail} />
                    </div>
                  </div>
                ) : null
              }
            />

            {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
            <div className="flex justify-center items-center mt-6 gap-2">
              <button
                onClick={() => setCurrentPage((prev) => Math.max(1, prev - 1))}
                disabled={currentPage === 1}
                className="px-3 py-1 border rounded disabled:opacity-50"
              >
                Ïù¥Ï†Ñ
              </button>
              <span className="px-3 py-1">ÌéòÏù¥ÏßÄ {currentPage}</span>
              <button
                onClick={() => setCurrentPage((prev) => prev + 1)}
                className="px-3 py-1 border rounded"
              >
                Îã§Ïùå
              </button>
            </div>
          </>
        )}
      </MypageContainer>
    </main>
  );
}
