'use client';
import React, { useState, useEffect, Suspense } from 'react';
import Image from 'next/image';
import { Button } from '@/src/components/button/button';
import Nav from '@/src/components/layouts/nav';
import { useAuth } from '@/src/contexts/authContext';
import { useCart } from '@/src/contexts/cartContext';
import { useProfile } from '@/src/contexts/profileContext';
import { useRouter, useSearchParams } from 'next/navigation';
import { CartItem } from '@/src/contexts/cartContext';
import { PaymentSuccessModal } from '@/src/components/modal/UserProfileModal';
import CustomFileUpload from '@/src/components/ui/CustomFileUpload';

interface BankInfo {
  id: string;
  bank_name: string;
  account_number: string;
  depositor: string;
  region_gu: {
    id: string;
    name: string;
  };
  display_types: {
    id: string;
    name: string;
  };
}

function PaymentPageContent() {
  const { user } = useAuth();
  const { cart, dispatch } = useCart();
  const { profiles } = useProfile();
  const router = useRouter();
  const searchParams = useSearchParams();

  const [selectedItems, setSelectedItems] = useState<CartItem[]>([]);
  const [paymentMethod, setPaymentMethod] = useState<'card' | 'bank_transfer'>(
    'card'
  );
  const [bankInfo, setBankInfo] = useState<BankInfo | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [sendByEmail, setSendByEmail] = useState(false);
  const [showBankTransferModal, setShowBankTransferModal] = useState(false);
  const [draftDeliveryMethod, setDraftDeliveryMethod] = useState<
    'email' | 'upload'
  >('upload');
  const [isApprovedOrder, setIsApprovedOrder] = useState(false);
  const [taxInvoice, setTaxInvoice] = useState(false);
  const [isAgreedCaution, setIsAgreedCaution] = useState(false);
  const [showPaymentSuccessModal, setShowPaymentSuccessModal] = useState(false);
  const [paymentSuccessData, setPaymentSuccessData] = useState({
    orderNumber: '',
    totalAmount: 0,
  });
  const [projectName, setProjectName] = useState('');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [validationErrors, setValidationErrors] = useState<{
    projectName: string;
    fileUpload: string;
    agreement: string;
  }>({
    projectName: '',
    fileUpload: '',
    agreement: '',
  });
  const [userProfiles, setUserProfiles] = useState<
    {
      id: string;
      profile_title: string;
      company_name?: string;
      business_registration_number?: string;
      business_registration_file?: string;
      phone: string;
      email: string;
      contact_person_name: string;
      fax_number?: string;
      is_default: boolean;
      is_public_institution?: boolean;
      is_company?: boolean;
      created_at: string;
    }[]
  >([]);

  // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchUserProfiles = async () => {
      if (!user?.id) return;

      try {
        const response = await fetch(`/api/user-profiles?userId=${user.id}`);
        const data = await response.json();

        if (data.success) {
          console.log('üîç Í∞ÄÏ†∏Ïò® ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞:', data.data);
          // user_auth_idÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ Ï∂îÍ∞Ä
          const profilesWithAuthId = data.data.map(
            (profile: Record<string, unknown>) => ({
              ...profile,
              user_auth_id: (profile.user_auth_id as string) || user.id,
            })
          );
          console.log(
            'üîç user_auth_id Ï∂îÍ∞ÄÎêú ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞:',
            profilesWithAuthId
          );
          setUserProfiles(profilesWithAuthId);
        }
      } catch (error) {
        console.error('üîç ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
      }
    };

    fetchUserProfiles();
  }, [user?.id]);

  // Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ìï®Ïàò
  const validateForm = () => {
    console.log('üîç validateForm ÏãúÏûë');
    console.log('üîç projectName:', projectName);
    console.log('üîç sendByEmail:', sendByEmail);
    console.log('üîç selectedFile:', selectedFile?.name || 'ÏóÜÏùå');
    console.log('üîç isAgreedCaution:', isAgreedCaution);

    const errors = {
      projectName: '',
      fileUpload: '',
      agreement: '',
    };

    // 1. ÏûëÏóÖÏù¥Î¶Ñ Í≤ÄÏÇ¨
    if (!projectName.trim()) {
      errors.projectName = 'ÏûëÏóÖÏù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
      console.log('üîç ÏûëÏóÖÏù¥Î¶Ñ Í≤ÄÏÇ¨ Ïã§Ìå®');
    }

    // 2. ÌååÏùºÏóÖÎ°úÎìú Î∞©Ïãù Í≤ÄÏÇ¨
    if (!sendByEmail && !selectedFile) {
      errors.fileUpload = 'ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÍ±∞ÎÇò Ïù¥Î©îÏùº Ï†ÑÏÜ°ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.';
      console.log('üîç ÌååÏùºÏóÖÎ°úÎìú Î∞©Ïãù Í≤ÄÏÇ¨ Ïã§Ìå®');
    }

    // 3. Ïú†ÏùòÏÇ¨Ìï≠ ÎèôÏùò Í≤ÄÏÇ¨
    if (!isAgreedCaution) {
      errors.agreement = 'Ïú†ÏùòÏÇ¨Ìï≠Ïóê ÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî.';
      console.log('üîç Ïú†ÏùòÏÇ¨Ìï≠ ÎèôÏùò Í≤ÄÏÇ¨ Ïã§Ìå®');
    }

    console.log('üîç Í≤ÄÏÇ¨ Í≤∞Í≥º errors:', errors);
    setValidationErrors(errors);
    const isValid = !Object.values(errors).some((error) => error !== '');
    console.log('üîç ÏµúÏ¢Ö Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Í≤∞Í≥º:', isValid);
    return isValid;
  };

  // Ìå®ÎÑê ÌÉÄÏûÖ ÌëúÏãú Ìï®Ïàò
  const getPanelTypeDisplay = (panelType: string) => {
    const typeMap: Record<string, string> = {
      panel: 'ÌòÑÏàòÎßâÍ≤åÏãúÎåÄ',
      top_fixed: 'ÏÉÅÎã®Í¥ëÍ≥†',
      led: 'LEDÏ†ÑÏûêÍ≤åÏãúÎåÄ',
      multi_panel: 'Ïó∞Î¶ΩÌòï',
      lower_panel: 'Ï†ÄÎã®Ìòï',
      bulletin_board: 'ÏãúÎØº/Î¨∏ÌôîÍ≤åÏãúÎåÄ',
      semi_auto: 'Î∞òÏûêÎèô',
      with_lighting: 'Ï°∞Î™ÖÏö©',
      no_lighting: 'ÎπÑÏ°∞Î™ÖÏö©',
      manual: 'ÌòÑÏàòÎßâÍ≤åÏãúÎåÄ',
      cultural_board: 'ÏãúÎØº/Î¨∏ÌôîÍ≤åÏãúÎåÄ',
    };
    return typeMap[panelType] || panelType;
  };

  // URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÏÑ†ÌÉùÎêú ÏïÑÏù¥ÌÖú IDÎì§ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const itemsParam = searchParams.get('items');
    const approvedParam = searchParams.get('approved');
    console.log('üîç Payment page - itemsParam:', itemsParam);
    console.log('üîç Payment page - approvedParam:', approvedParam);
    console.log('üîç Payment page - cart:', cart);

    if (approvedParam === 'true') {
      setIsApprovedOrder(true);
    }

    if (itemsParam) {
      try {
        const selectedItemIds = JSON.parse(
          decodeURIComponent(itemsParam)
        ) as string[];
        console.log('üîç Payment page - selectedItemIds:', selectedItemIds);

        // ÏäπÏù∏Îêú Ï£ºÎ¨∏Ïùò Í≤ΩÏö∞ cartÏóêÏÑú ÏïÑÏù¥ÌÖúÏùÑ Ï∞æÏßÄ ÏïäÍ≥† Ï£ºÎ¨∏ IDÎ•º ÏßÅÏ†ë ÏÇ¨Ïö©
        if (isApprovedOrder) {
          // ÏäπÏù∏Îêú Ï£ºÎ¨∏Ïùò Í≤ΩÏö∞ Ï£ºÎ¨∏ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏôÄÏÑú selectedItems ÏÑ§Ï†ï
          fetchApprovedOrderItems(selectedItemIds[0]);
        } else {
          const items = cart.filter((item) =>
            selectedItemIds.includes(item.id)
          );
          console.log('üîç Payment page - filtered items:', items);
          setSelectedItems(items);
        }
      } catch (error) {
        console.error('Error parsing selected items:', error);
        setError('ÏÑ†ÌÉùÎêú ÏÉÅÌíà Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } else {
      console.log('üîç Payment page - no items param found');
    }
  }, [searchParams, cart, isApprovedOrder]);

  // sendByEmail ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå draftDeliveryMethod ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    setDraftDeliveryMethod(sendByEmail ? 'email' : 'upload');
  }, [sendByEmail]);

  // paymentMethod ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ
  useEffect(() => {
    console.log('üîç paymentMethod ÏÉÅÌÉú Î≥ÄÍ≤ΩÎê®:', paymentMethod);
  }, [paymentMethod]);

  // selectedItems ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ
  useEffect(() => {
    console.log(
      'üîç selectedItems ÏÉÅÌÉú Î≥ÄÍ≤ΩÎê®:',
      selectedItems.length,
      selectedItems.map((item) => ({
        id: item.id,
        name: item.name,
        fileName: item.fileName,
        fileUploadMethod: item.fileUploadMethod,
      }))
    );

    // selectedItemsÍ∞Ä ÎπÑÏñ¥ÏûàÍ≤å ÎêòÎ©¥ Í≤ΩÍ≥†
    if (selectedItems.length === 0) {
      console.warn('üîç WARNING: selectedItemsÍ∞Ä ÎπÑÏñ¥ÏûàÏùå!');
      console.warn('üîç ÌòÑÏû¨ cart ÏÉÅÌÉú:', cart.length);
      console.warn('üîç ÌòÑÏû¨ URL params:', searchParams.get('items'));
    }
  }, [selectedItems, cart, searchParams]);

  // selectedFile ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ
  useEffect(() => {
    console.log('üîç selectedFile ÏÉÅÌÉú Î≥ÄÍ≤ΩÎê®:', selectedFile?.name || 'ÏóÜÏùå');
  }, [selectedFile]);

  // Ïã§ÏãúÍ∞Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
  useEffect(() => {
    if (selectedItems.length > 0) {
      const errors = {
        projectName: '',
        fileUpload: '',
        agreement: '',
      };

      // 1. ÏûëÏóÖÏù¥Î¶Ñ Í≤ÄÏÇ¨
      if (!projectName.trim()) {
        errors.projectName = 'ÏûëÏóÖÏù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
      }

      // 2. ÌååÏùºÏóÖÎ°úÎìú Î∞©Ïãù Í≤ÄÏÇ¨
      if (!sendByEmail && !selectedFile) {
        errors.fileUpload = 'ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÍ±∞ÎÇò Ïù¥Î©îÏùº Ï†ÑÏÜ°ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.';
      }

      // 3. Ïú†ÏùòÏÇ¨Ìï≠ ÎèôÏùò Í≤ÄÏÇ¨
      if (!isAgreedCaution) {
        errors.agreement = 'Ïú†ÏùòÏÇ¨Ìï≠Ïóê ÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî.';
      }

      setValidationErrors(errors);
    }
  }, [
    projectName,
    selectedFile,
    sendByEmail,
    isAgreedCaution,
    selectedItems.length,
  ]);

  // ÏäπÏù∏Îêú Ï£ºÎ¨∏Ïùò ÏïÑÏù¥ÌÖú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchApprovedOrderItems = async (orderId: string) => {
    try {
      const response = await fetch(`/api/orders/${orderId}`);
      const data = await response.json();

      if (data.success) {
        // Ï£ºÎ¨∏ Ï†ïÎ≥¥Î•º CartItem ÌòïÌÉúÎ°ú Î≥ÄÌôò
        const orderItems: CartItem[] =
          data.data.order_details?.map(
            (detail: {
              id: string;
              name: string;
              price: number;
              quantity: number;
              district?: string;
              panel_type?: string;
              panel_info_id?: string;
              panel_slot_snapshot?: {
                id?: string;
                notes?: string;
                max_width?: number;
                slot_name?: string;
                tax_price?: number;
                created_at?: string;
                max_height?: number;
                price_unit?: string;
                updated_at?: string;
                banner_type?: string;
                slot_number?: number;
                total_price?: number;
                panel_info_id?: string;
                road_usage_fee?: number;
                advertising_fee?: number;
                panel_slot_status?: string;
              };
              panel_slot_usage_id?: string;
              period?: string;
              selected_year?: number;
              selected_month?: number;
            }) => ({
              id: detail.id,
              name: detail.name,
              price: detail.price,
              quantity: detail.quantity,
              district: detail.district || '',
              type: 'banner-display' as const,
              panel_type: detail.panel_type || 'panel',
              panel_info_id: detail.panel_info_id,
              panel_slot_snapshot: detail.panel_slot_snapshot,
              panel_slot_usage_id: detail.panel_slot_usage_id,
              halfPeriod: detail.period,
              selectedYear: detail.selected_year,
              selectedMonth: detail.selected_month,
            })
          ) || [];

        setSelectedItems(orderItems);
      }
    } catch (error) {
      console.error('Failed to fetch approved order items:', error);
      setError('ÏäπÏù∏Îêú Ï£ºÎ¨∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // Ïû•Î∞îÍµ¨ÎãàÏóêÏÑú ÏÑ†ÌÉùÎêú ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  console.log('üîç profiles ÏÉÅÌÉú:', profiles?.length || 0, profiles);
  console.log('üîç userProfiles ÏÉÅÌÉú:', userProfiles?.length || 0, userProfiles);
  console.log(
    'üîç selectedItems:',
    selectedItems.length,
    selectedItems.map((item) => ({
      id: item.id,
      contact_person_name: item.contact_person_name,
      phone: item.phone,
      company_name: item.company_name,
      email: item.email,
      user_profile_id: item.user_profile_id,
    }))
  );

  // selectedItemsÏóêÏÑú Ïã§Ï†ú ÌîÑÎ°úÌïÑ ID ÌôïÏù∏ (Ï≤´ Î≤àÏß∏ ÏïÑÏù¥ÌÖú Í∏∞Ï§Ä)
  const selectedProfileId =
    selectedItems.length > 0 ? selectedItems[0].user_profile_id : null;

  console.log('üîç selectedProfileId:', selectedProfileId);

  // Ïã§Ï†ú ÌîÑÎ°úÌïÑ IDÍ∞Ä ÏûàÏúºÎ©¥ Ìï¥Îãπ ÌîÑÎ°úÌïÑ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ ÌîÑÎ°úÌïÑ ÏÇ¨Ïö©
  const defaultProfile = selectedProfileId
    ? userProfiles?.find((profile) => profile.id === selectedProfileId) ||
      profiles?.find((profile) => profile.id === selectedProfileId)
    : userProfiles?.find((profile) => profile.is_default) ||
      userProfiles?.[0] ||
      profiles?.find((profile) => profile.is_default) ||
      profiles?.[0];

  console.log('üîç defaultProfile:', defaultProfile);

  // Í∞ÄÍ≤© Í≥ÑÏÇ∞
  const priceSummary = selectedItems.reduce(
    (summary, item) => {
      const roadUsageFee = item.panel_slot_snapshot?.road_usage_fee || 0;
      const advertisingFee = item.panel_slot_snapshot?.advertising_fee || 0;
      const taxPrice = item.panel_slot_snapshot?.tax_price || 0;
      const totalPrice = item.price || 0;

      return {
        roadUsageFee: summary.roadUsageFee + roadUsageFee,
        advertisingFee: summary.advertisingFee + advertisingFee,
        taxPrice: summary.taxPrice + taxPrice,
        totalPrice: summary.totalPrice + totalPrice,
      };
    },
    {
      roadUsageFee: 0,
      advertisingFee: 0,
      taxPrice: 0,
      totalPrice: 0,
    }
  );

  // Íµ¨Î≥Ñ Í≥ÑÏ¢åÎ≤àÌò∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchBankInfo = async () => {
      if (selectedItems.length === 0) return;

      // Ï≤´ Î≤àÏß∏ ÏïÑÏù¥ÌÖúÏùò Íµ¨ÏôÄ ÌÉÄÏûÖÏúºÎ°ú Í≥ÑÏ¢åÎ≤àÌò∏ Í∞ÄÏ†∏Ïò§Í∏∞
      const firstItem = selectedItems[0];
      const displayType =
        firstItem.type === 'banner-display' ? 'banner_display' : 'led_display';

      try {
        const response = await fetch(
          `/api/region-gu?action=getBankInfo&district=${encodeURIComponent(
            firstItem.district
          )}&displayType=${displayType}`
        );
        const data = await response.json();

        if (data.success) {
          setBankInfo(data.data);
        }
      } catch (error) {
        console.error('Error fetching bank info:', error);
      }
    };

    fetchBankInfo();
  }, [selectedItems]);

  // Í≤∞Ï†ú Ï≤òÎ¶¨
  const handlePayment = async () => {
    console.log('üîç handlePayment ÏãúÏûë');
    console.log('üîç user:', user);
    console.log('üîç selectedItems.length:', selectedItems.length);
    console.log('üîç selectedFile:', selectedFile?.name || 'ÏóÜÏùå');
    console.log('üîç sendByEmail:', sendByEmail);
    console.log('üîç defaultProfile:', defaultProfile);
    console.log('üîç userProfiles:', userProfiles);
    console.log('üîç profiles:', profiles);
    console.log('üîç projectName:', projectName);

    if (!user) {
      setError('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }

    if (!defaultProfile) {
      console.error('üîç defaultProfileÏù¥ undefinedÏûÖÎãàÎã§.');
      console.error('üîç userProfiles:', userProfiles);
      console.error('üîç profiles:', profiles);
      console.error('üîç selectedProfileId:', selectedProfileId);
      setError(
        'ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. ÎßàÏù¥ÌéòÏù¥ÏßÄÏóêÏÑú ÌîÑÎ°úÌïÑÏùÑ ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.'
      );
      return;
    }

    console.log('üîç defaultProfile Í≤ÄÏ¶ù ÌÜµÍ≥º:', defaultProfile.id);

    if (selectedItems.length === 0) {
      console.error('üîç selectedItemsÍ∞Ä ÎπÑÏñ¥ÏûàÏùå!');
      setError('ÏÑ†ÌÉùÎêú ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    }

    console.log('üîç selectedItems Í≤ÄÏ¶ù ÌÜµÍ≥º:', selectedItems.length);

    // Ìèº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    console.log('üîç Ìèº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏãúÏûë');
    if (!validateForm()) {
      console.error('üîç Ìèº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ïã§Ìå®');
      setError('ÌïÑÏàò Ìï≠Î™©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    console.log('üîç Ìèº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÌÜµÍ≥º');

    setIsProcessing(true);
    setError(null);

    try {
      // ÏäπÏù∏Îêú Ï£ºÎ¨∏Ïùò Í≤ΩÏö∞ Í∏∞Ï°¥ Ï£ºÎ¨∏ÏùÑ ÏóÖÎç∞Ïù¥Ìä∏
      if (isApprovedOrder) {
        await handleApprovedOrderPayment();
        return;
      }

      // Î≥µÌï© IDÏóêÏÑú ÏõêÎ≥∏ UUID Ï∂îÏ∂ú Ìï®Ïàò
      const extractPanelInfoId = (item: CartItem) => {
        const uuidPattern =
          /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;

        if (item.panel_info_id) {
          if (uuidPattern.test(item.panel_info_id)) {
            return item.panel_info_id;
          } else if (item.panel_info_id.includes('-')) {
            const parts = item.panel_info_id.split('-');
            if (parts.length >= 5) {
              const uuidPart = parts.slice(2).join('-');
              if (uuidPattern.test(uuidPart)) {
                return uuidPart;
              }
            }
          }
        } else if (item.id) {
          if (uuidPattern.test(item.id)) {
            return item.id;
          } else if (item.id.includes('-')) {
            const parts = item.id.split('-');
            if (parts.length >= 5) {
              const uuidPart = parts.slice(2).join('-');
              if (uuidPattern.test(uuidPart)) {
                return uuidPart;
              }
            }
          }
        }
        throw new Error('Ìå®ÎÑê Ï†ïÎ≥¥ IDÎ•º Ï∂îÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
      };

      // 1. Ï£ºÎ¨∏ ÏÉùÏÑ± API Ìò∏Ï∂ú (ÌååÏùº ÏóÖÎ°úÎìúÎäî Ï£ºÎ¨∏ ÏÉùÏÑ± ÌõÑ)
      console.log('üîç Ï£ºÎ¨∏ ÏÉùÏÑ± ÏãúÏûë - selectedItems:', selectedItems.length);
      console.log('üîç user.id:', user.id);
      console.log('üîç defaultProfile?.id:', defaultProfile?.id);

      // 2. Í≤∞Ï†úÏàòÎã® ID Í≤∞Ï†ï
      let paymentMethodId: string;

      if (paymentMethod === 'card') {
        // Ïã†Ïö©Ïπ¥Îìú Í≤∞Ï†úÏàòÎã® ID Ï°∞Ìöå
        const cardResponse = await fetch(
          '/api/payment?action=getPaymentMethods'
        );
        const cardData = await cardResponse.json();
        const creditCard = cardData.data.find(
          (method: { method_code: string; id: string }) =>
            method.method_code === 'credit_card'
        );

        if (!creditCard) {
          throw new Error(
            'Ïã†Ïö©Ïπ¥Îìú Í≤∞Ï†úÏàòÎã®ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.'
          );
        }

        paymentMethodId = creditCard.id;
      } else if (paymentMethod === 'bank_transfer') {
        // Í≥ÑÏ¢åÏù¥Ï≤¥ Í≤∞Ï†úÏàòÎã® ID Ï°∞Ìöå
        const bankResponse = await fetch(
          '/api/payment?action=getPaymentMethods'
        );
        const bankData = await bankResponse.json();
        const bankTransfer = bankData.data.find(
          (method: { method_code: string; id: string }) =>
            method.method_code === 'bank_transfer'
        );

        if (!bankTransfer) {
          throw new Error(
            'Í≥ÑÏ¢åÏù¥Ï≤¥ Í≤∞Ï†úÏàòÎã®ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.'
          );
        }

        paymentMethodId = bankTransfer.id;
      } else {
        throw new Error('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Í≤∞Ï†úÏàòÎã®ÏûÖÎãàÎã§.');
      }

      // ÏÑ†ÌÉùÎêú ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º Ï£ºÎ¨∏Ïóê Ìè¨Ìï®
      const orderPayload = {
        items: selectedItems.map((item) => ({
          id: item.id,
          price: item.price,
          quantity: 1,
          panel_info_id: extractPanelInfoId(item),
          panel_slot_snapshot: item.panel_slot_snapshot,
          panel_slot_usage_id: item.panel_slot_usage_id,
          halfPeriod: item.halfPeriod,
          selectedYear: item.selectedYear,
          selectedMonth: item.selectedMonth,
          startDate: new Date().toISOString().split('T')[0],
          endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000)
            .toISOString()
            .split('T')[0],
        })),
        userAuthId: user.id, // ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ID Ï∂îÍ∞Ä
        userProfileId: defaultProfile?.id, // Ïã§Ï†ú ÌîÑÎ°úÌïÑ ID ÏÇ¨Ïö©
        paymentMethodId: paymentMethodId, // Í≤∞Ï†úÏàòÎã® ID Ï∂îÍ∞Ä
        draftDeliveryMethod: draftDeliveryMethod, // ÏãúÏïà Ï†ÑÏÜ° Î∞©Ïãù Ï∂îÍ∞Ä
        isRequireTaxFiling: taxInvoice, // ÏÑ∏Í∏àÍ≥ÑÏÇ∞ÏÑú Ïã†Ï≤≠ Ïó¨Î∂Ä Ï∂îÍ∞Ä
        isAgreedCaution: isAgreedCaution, // Ïú†ÏùòÏÇ¨Ìï≠ ÎèôÏùò Ïó¨Î∂Ä Ï∂îÍ∞Ä
        projectName: projectName, // ÏûëÏóÖ Ïù¥Î¶Ñ Ï∂îÍ∞Ä
      };

      console.log('üîç Ï£ºÎ¨∏ ÌéòÏù¥Î°úÎìú:', orderPayload);

      const orderResponse = await fetch('/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderPayload),
      });

      const orderData = await orderResponse.json();

      if (!orderData.success) {
        throw new Error(orderData.error || 'Ï£ºÎ¨∏ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const orderId = orderData.order.orderId;
      const totalAmount = priceSummary.totalPrice;

      // 2. selectedItemsÏóêÏÑú ÌååÏùº Ï†ïÎ≥¥ Ï∂îÏ∂ú
      const fileInfo = selectedItems[0]?.selectedFile;
      const fileUploadMethod = selectedItems[0]?.fileUploadMethod;
      const fileName = selectedItems[0]?.fileName;

      console.log('üîç ÌååÏùº ÏóÖÎ°úÎìú Ï†ïÎ≥¥:', {
        fileInfo: fileInfo?.name,
        fileUploadMethod,
        fileName,
      });

      // 3. Í≤∞Ï†ú Ï≤òÎ¶¨ API Ìò∏Ï∂ú
      const paymentResponse = await fetch('/api/payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'processPayment',
          orderId: orderId,
          paymentMethodId: paymentMethodId,
          amount: totalAmount,
          userAuthId: user.id,
          userProfileId: defaultProfile?.id,
          draftDeliveryMethod: draftDeliveryMethod, // ÏãúÏïà Ï†ÑÏÜ° Î∞©Ïãù Ï∂îÍ∞Ä
          isRequireTaxFiling: taxInvoice, // ÏÑ∏Í∏àÍ≥ÑÏÇ∞ÏÑú Ïã†Ï≤≠ Ïó¨Î∂Ä Ï∂îÍ∞Ä
          isAgreedCaution: isAgreedCaution, // Ïú†ÏùòÏÇ¨Ìï≠ ÎèôÏùò Ïó¨Î∂Ä Ï∂îÍ∞Ä
        }),
      });

      const paymentData = await paymentResponse.json();

      if (!paymentData.success) {
        throw new Error(paymentData.error || 'Í≤∞Ï†ú Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      // ÏÑ±Í≥µ Ïãú ÏÑ†ÌÉùÎêú ÏïÑÏù¥ÌÖúÎì§ÏùÑ Ïû•Î∞îÍµ¨ÎãàÏóêÏÑú Ï†úÍ±∞
      selectedItems.forEach((item) => {
        dispatch({ type: 'REMOVE_ITEM', id: item.id });
      });

      // 3. Í≤∞Ï†ú ÏôÑÎ£å ÌõÑ ÌååÏùº ÏóÖÎ°úÎìú (selectedItemsÏóêÏÑú ÌååÏùº Ï†ïÎ≥¥ Ï∂îÏ∂ú)
      if (fileInfo && fileUploadMethod === 'upload') {
        console.log('üîç Í≤∞Ï†ú ÏôÑÎ£å ÌõÑ ÌååÏùº ÏóÖÎ°úÎìú ÏãúÏûë:', fileName);
        const formData = new FormData();
        formData.append('file', fileInfo);
        formData.append('orderId', orderId);

        try {
          const uploadResponse = await fetch('/api/design-drafts/upload', {
            method: 'POST',
            body: formData,
          });

          if (uploadResponse.ok) {
            const uploadData = await uploadResponse.json();
            if (uploadData.success) {
              console.log('üîç ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ:', uploadData.data);
            }
          } else {
            console.warn('üîç ÌååÏùº ÏóÖÎ°úÎìú Ïã§Ìå®:', uploadResponse.status);
          }
        } catch (error) {
          console.error('üîç ÌååÏùº ÏóÖÎ°úÎìú Ïò§Î•ò:', error);
        }
      }

      // Í≤∞Ï†ú ÏôÑÎ£å Î™®Îã¨ ÌëúÏãú
      setPaymentSuccessData({
        orderNumber: orderData.order.orderNumber || orderId.slice(0, 8),
        totalAmount: totalAmount,
      });
      setShowPaymentSuccessModal(true);
    } catch (error) {
      console.error('Payment error:', error);
      setError(
        error instanceof Error ? error.message : 'Í≤∞Ï†ú Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
      );
    } finally {
      setIsProcessing(false);
    }
  };

  // ÏäπÏù∏Îêú Ï£ºÎ¨∏Ïùò Í≤∞Ï†ú Ï≤òÎ¶¨
  const handleApprovedOrderPayment = async () => {
    console.log('üîç handleApprovedOrderPayment ÏãúÏûë');
    console.log('üîç projectName:', projectName);

    if (!user) {
      setError('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }

    try {
      // URLÏóêÏÑú Ï£ºÎ¨∏ ID Í∞ÄÏ†∏Ïò§Í∏∞
      const itemsParam = searchParams.get('items');
      if (!itemsParam) {
        throw new Error('Ï£ºÎ¨∏ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }

      const orderIds = JSON.parse(decodeURIComponent(itemsParam)) as string[];
      const orderId = orderIds[0];

      // Í≤∞Ï†úÏàòÎã® ID Í≤∞Ï†ï
      let paymentMethodId: string;

      if (paymentMethod === 'card') {
        const cardResponse = await fetch(
          '/api/payment?action=getPaymentMethods'
        );
        const cardData = await cardResponse.json();
        const creditCard = cardData.data.find(
          (method: { method_code: string; id: string }) =>
            method.method_code === 'credit_card'
        );

        if (!creditCard) {
          throw new Error(
            'Ïã†Ïö©Ïπ¥Îìú Í≤∞Ï†úÏàòÎã®ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.'
          );
        }

        paymentMethodId = creditCard.id;
      } else if (paymentMethod === 'bank_transfer') {
        const bankResponse = await fetch(
          '/api/payment?action=getPaymentMethods'
        );
        const bankData = await bankResponse.json();
        const bankTransfer = bankData.data.find(
          (method: { method_code: string; id: string }) =>
            method.method_code === 'bank_transfer'
        );

        if (!bankTransfer) {
          throw new Error(
            'Í≥ÑÏ¢åÏù¥Ï≤¥ Í≤∞Ï†úÏàòÎã®ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.'
          );
        }

        paymentMethodId = bankTransfer.id;
      } else {
        throw new Error('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Í≤∞Ï†úÏàòÎã®ÏûÖÎãàÎã§.');
      }

      // Í≤∞Ï†ú Ï≤òÎ¶¨
      const paymentResponse = await fetch('/api/payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'processApprovedOrderPayment',
          orderId: orderId,
          paymentMethodId: paymentMethodId,
          amount: priceSummary.totalPrice,
          userAuthId: user.id,
          userProfileId: defaultProfile?.id,
          draftDeliveryMethod: draftDeliveryMethod,
          isRequireTaxFiling: taxInvoice, // ÏÑ∏Í∏àÍ≥ÑÏÇ∞ÏÑú Ïã†Ï≤≠ Ïó¨Î∂Ä Ï∂îÍ∞Ä
          isAgreedCaution: isAgreedCaution, // Ïú†ÏùòÏÇ¨Ìï≠ ÎèôÏùò Ïó¨Î∂Ä Ï∂îÍ∞Ä
        }),
      });

      const paymentData = await paymentResponse.json();

      if (!paymentData.success) {
        throw new Error(paymentData.error || 'Í≤∞Ï†ú Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      // ÏÑ±Í≥µ Ïãú ÏãúÏïàÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      router.push('/mypage/design');
    } catch (error) {
      console.error('Approved order payment error:', error);
      setError(
        error instanceof Error ? error.message : 'Í≤∞Ï†ú Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'
      );
    } finally {
      setIsProcessing(false);
    }
  };

  if (error) {
    return (
      <main className="min-h-screen bg-white pt-[5.5rem] bg-gray-100 lg:px-[10rem]">
        <Nav variant="default" className="bg-white" />
        <div className="container mx-auto px-4 sm:px-1 py-8">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-center">
              <svg
                className="w-5 h-5 text-red-400 mr-2"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clipRule="evenodd"
                />
              </svg>
              <span className="text-red-800 font-medium">{error}</span>
            </div>
            <Button
              className="mt-4 bg-red-600 text-white px-4 py-2 rounded"
              onClick={() => router.push('/cart')}
            >
              Ïû•Î∞îÍµ¨ÎãàÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
            </Button>
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-white pt-[5.5rem] bg-gray-100 lg:px-[10rem]">
      <Nav variant="default" className="bg-white" />

      <div className="container mx-auto px-4 sm:px-1 py-8 grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 gap-8">
        {/* Ï¢åÏ∏° - Ï£ºÎ¨∏ ÏÉÅÌíà Ï†ïÎ≥¥ */}
        <div className="space-y-8 border border-solid border-gray-3 rounded-[0.375rem] p-[2.5rem] sm:p-[1.5rem]">
          {/* Ï£ºÎ¨∏ ÏÉÅÌíà Î™©Î°ù */}
          {selectedItems.map((item) => (
            <div key={item.id}>
              <section
                key={item.id}
                className="p-6 border rounded-lg shadow-sm flex flex-col gap-4 sm:p-2"
              >
                <div>
                  <h2 className="text-1.25 text-gray-2 font-bold mb-4 border-b-solid border-black border-b-[0.1rem] pb-4">
                    {item.type === 'banner-display'
                      ? 'ÌòÑÏàòÎßâ Í≤åÏãúÎåÄ'
                      : 'LED Ï†ÑÏûêÍ≤åÏãúÎåÄ'}
                  </h2>
                  <div className="mb-4 text-1.25 font-700 text-[#222] sm:text-0.875">
                    {item.name}
                    <span className="text-gray-500 text-0.875 ml-2">
                      (
                      {getPanelTypeDisplay(
                        item.panel_type ||
                          item.panel_slot_snapshot?.banner_type ||
                          'panel'
                      )}
                      {item.district === 'ÏÑúÎåÄÎ¨∏Íµ¨' &&
                        item.is_for_admin &&
                        '-ÌñâÏ†ïÏö©Ìå®ÎÑê'}
                      )
                    </span>
                  </div>
                  <div className="flex items-center gap-2 border border-solid border-gray-12 rounded-[0.375rem] p-4 bg-gray-11 sm:p-2">
                    <div className="text-1.25 font-700 sm:text-0.875">
                      {item.is_public_institution
                        ? 'Í≥µÍ≥µÍ∏∞Í¥ÄÏö©'
                        : item.is_company
                        ? 'Í∏∞ÏóÖÏö©'
                        : 'Í∞úÏù∏Ïö©'}{' '}
                      -{' '}
                      {defaultProfile?.contact_person_name ||
                        user?.name ||
                        'ÏÇ¨Ïö©Ïûê'}
                    </div>
                  </div>
                </div>

                <div className="text-1 text-gray-10">
                  <h3 className="text-1.25 font-600 mb-2 text-[#222] sm:pb-5">
                    Í≥†Í∞ù Ï†ïÎ≥¥
                  </h3>
                  <form className="flex flex-col gap-5">
                    <div className="flex flex-col gap-4 sm:gap-8">
                      {/* ÏûëÏóÖÏù¥Î¶Ñ */}
                      <div className="flex flex-col sm:flex-col md:flex-row items-start md:items-center justify-between gap-2 md:gap-4 sm:gap-2">
                        <label className="w-full md:w-[9rem] text-gray-600 font-medium">
                          ÏûëÏóÖÏù¥Î¶Ñ
                        </label>
                        <div className="flex flex-col gap-1">
                          <input
                            type="text"
                            value={projectName}
                            onChange={(e) => {
                              setProjectName(e.target.value);
                              // ÏûÖÎ†• Ïãú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏóêÎü¨ Ï¥àÍ∏∞Ìôî
                              if (validationErrors.projectName) {
                                setValidationErrors((prev) => ({
                                  ...prev,
                                  projectName: '',
                                }));
                              }
                            }}
                            className={`w-full md:w-[21.25rem] sm:w-[13rem] border border-solid shadow-none rounded px-4 h-[3rem] ${
                              validationErrors.projectName
                                ? 'border-red-500'
                                : 'border-gray-300'
                            }`}
                            placeholder="ÏûëÏóÖ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                          />
                          {validationErrors.projectName && (
                            <span className="text-red-500 text-sm">
                              {validationErrors.projectName}
                            </span>
                          )}
                        </div>
                      </div>

                      {/* ÌååÏùºÏóÖÎ°úÎìú */}
                      <div className="flex flex-col sm:flex-col md:flex-row items-start justify-between gap-2 md:gap-4 sm:gap-2">
                        <label className="w-full md:w-[9rem] text-gray-600 font-medium pt-2">
                          ÌååÏùºÏóÖÎ°úÎìú
                        </label>
                        <div className="flex-1 space-y-2">
                          {/* Ïª§Ïä§ÌÖÄ ÌååÏùº ÏóÖÎ°úÎìú */}
                          <CustomFileUpload
                            onFileSelect={(file) => {
                              console.log(
                                'üîç Í≤∞Ï†ú ÌéòÏù¥ÏßÄÏóêÏÑú ÌååÏùº ÏÑ†ÌÉùÎê®:',
                                file.name
                              );
                              console.log(
                                'üîç ÌååÏùº ÏÑ†ÌÉù Ï†Ñ selectedItems:',
                                selectedItems.length
                              );

                              // selectedItemsÏóê ÌååÏùº Ï†ïÎ≥¥ Ï∂îÍ∞Ä - Ìï®ÏàòÌòï ÏóÖÎç∞Ïù¥Ìä∏ ÏÇ¨Ïö©
                              setSelectedItems((prevItems) => {
                                console.log(
                                  'üîç setSelectedItems Ìï®ÏàòÌòï ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë'
                                );
                                console.log('üîç prevItems:', prevItems.length);

                                if (prevItems.length === 0) {
                                  console.warn(
                                    'üîç WARNING: prevItemsÍ∞Ä ÎπÑÏñ¥ÏûàÏùå! Î≥µÍµ¨ ÏãúÎèÑ...'
                                  );

                                  // URLÏóêÏÑú ÏïÑÏù¥ÌÖú Ï†ïÎ≥¥Î•º Îã§Ïãú Í∞ÄÏ†∏ÏôÄÏÑú Î≥µÍµ¨ ÏãúÎèÑ
                                  const itemsParam = searchParams.get('items');
                                  if (itemsParam) {
                                    try {
                                      const selectedItemIds = JSON.parse(
                                        decodeURIComponent(itemsParam)
                                      ) as string[];
                                      const recoveredItems = cart.filter(
                                        (item) =>
                                          selectedItemIds.includes(item.id)
                                      );
                                      console.log(
                                        'üîç Î≥µÍµ¨Îêú ÏïÑÏù¥ÌÖú:',
                                        recoveredItems.length
                                      );

                                      if (recoveredItems.length > 0) {
                                        const updatedItems = recoveredItems.map(
                                          (item) => ({
                                            ...item,
                                            selectedFile: file,
                                            fileUploadMethod: 'upload' as const,
                                            fileName: file.name,
                                            fileSize: file.size,
                                            fileType: file.type,
                                          })
                                        );
                                        console.log(
                                          'üîç Î≥µÍµ¨ ÌõÑ ÌååÏùº Ï†ïÎ≥¥ Ï∂îÍ∞Ä:',
                                          updatedItems.length
                                        );
                                        return updatedItems;
                                      }
                                    } catch (error) {
                                      console.error('üîç Î≥µÍµ¨ Ïã§Ìå®:', error);
                                    }
                                  }

                                  return prevItems;
                                }

                                const updatedItems = prevItems.map((item) => ({
                                  ...item,
                                  selectedFile: file,
                                  fileUploadMethod: 'upload' as const,
                                  fileName: file.name,
                                  fileSize: file.size,
                                  fileType: file.type,
                                }));

                                console.log(
                                  'üîç ÌååÏùº Ï†ïÎ≥¥Í∞Ä Ï∂îÍ∞ÄÎêú updatedItems:',
                                  updatedItems.length
                                );
                                return updatedItems;
                              });

                              setSelectedFile(file);
                            }}
                            disabled={sendByEmail}
                            placeholder="ÏãúÏïà ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
                            className="w-full md:w-[21.25rem] sm:w-[13rem]"
                          />

                          <div className="flex flex-col gap-2 items-start">
                            <div className="flex items-center gap-2">
                              <input
                                type="checkbox"
                                id="sendByEmail"
                                checked={sendByEmail}
                                onChange={(e) => {
                                  const isEmail = e.target.checked;
                                  setSendByEmail(isEmail);

                                  // Ïù¥Î©îÏùº ÏÑ†ÌÉù Ïãú selectedItemsÏóê Ï†ïÎ≥¥ Ï∂îÍ∞Ä - Ìï®ÏàòÌòï ÏóÖÎç∞Ïù¥Ìä∏ ÏÇ¨Ïö©
                                  setSelectedItems((prevItems) => {
                                    console.log(
                                      'üîç Ïù¥Î©îÏùº Ï≤¥ÌÅ¨Î∞ïÏä§ Î≥ÄÍ≤Ω - prevItems:',
                                      prevItems.length
                                    );

                                    if (prevItems.length === 0) {
                                      console.warn(
                                        'üîç WARNING: Ïù¥Î©îÏùº Î≥ÄÍ≤Ω Ïãú prevItemsÍ∞Ä ÎπÑÏñ¥ÏûàÏùå! Î≥µÍµ¨ ÏãúÎèÑ...'
                                      );

                                      // URLÏóêÏÑú ÏïÑÏù¥ÌÖú Ï†ïÎ≥¥Î•º Îã§Ïãú Í∞ÄÏ†∏ÏôÄÏÑú Î≥µÍµ¨ ÏãúÎèÑ
                                      const itemsParam =
                                        searchParams.get('items');
                                      if (itemsParam) {
                                        try {
                                          const selectedItemIds = JSON.parse(
                                            decodeURIComponent(itemsParam)
                                          ) as string[];
                                          const recoveredItems = cart.filter(
                                            (item) =>
                                              selectedItemIds.includes(item.id)
                                          );
                                          console.log(
                                            'üîç Ïù¥Î©îÏùº Î≥ÄÍ≤Ω Ïãú Î≥µÍµ¨Îêú ÏïÑÏù¥ÌÖú:',
                                            recoveredItems.length
                                          );

                                          if (recoveredItems.length > 0) {
                                            if (isEmail) {
                                              const updatedItems =
                                                recoveredItems.map((item) => ({
                                                  ...item,
                                                  fileUploadMethod:
                                                    'email' as const,
                                                  emailAddress:
                                                    'banner114@hanmail.net',
                                                  selectedFile: null,
                                                  fileName: null,
                                                  fileSize: null,
                                                  fileType: null,
                                                }));
                                              console.log(
                                                'üîç Ïù¥Î©îÏùº ÏÑ†ÌÉù Î≥µÍµ¨ ÌõÑ:',
                                                updatedItems.length
                                              );
                                              return updatedItems;
                                            } else {
                                              const updatedItems =
                                                recoveredItems.map((item) => ({
                                                  ...item,
                                                  fileUploadMethod: null,
                                                  emailAddress: null,
                                                  selectedFile: null,
                                                  fileName: null,
                                                  fileSize: null,
                                                  fileType: null,
                                                }));
                                              console.log(
                                                'üîç Ïù¥Î©îÏùº Ìï¥Ï†ú Î≥µÍµ¨ ÌõÑ:',
                                                updatedItems.length
                                              );
                                              return updatedItems;
                                            }
                                          }
                                        } catch (error) {
                                          console.error(
                                            'üîç Ïù¥Î©îÏùº Î≥ÄÍ≤Ω Ïãú Î≥µÍµ¨ Ïã§Ìå®:',
                                            error
                                          );
                                        }
                                      }

                                      return prevItems;
                                    }

                                    if (isEmail) {
                                      const updatedItems = prevItems.map(
                                        (item) => ({
                                          ...item,
                                          fileUploadMethod: 'email' as const,
                                          emailAddress: 'banner114@hanmail.net',
                                          selectedFile: null,
                                          fileName: null,
                                          fileSize: null,
                                          fileType: null,
                                        })
                                      );
                                      console.log(
                                        'üîç Ïù¥Î©îÏùº ÏÑ†ÌÉù - updatedItems:',
                                        updatedItems.length
                                      );
                                      return updatedItems;
                                    } else {
                                      // Ïù¥Î©îÏùº Ìï¥Ï†ú Ïãú ÌååÏùº Ï†ïÎ≥¥ Ï†úÍ±∞
                                      const updatedItems = prevItems.map(
                                        (item) => ({
                                          ...item,
                                          fileUploadMethod: null,
                                          emailAddress: null,
                                          selectedFile: null,
                                          fileName: null,
                                          fileSize: null,
                                          fileType: null,
                                        })
                                      );
                                      console.log(
                                        'üîç Ïù¥Î©îÏùº Ìï¥Ï†ú - updatedItems:',
                                        updatedItems.length
                                      );
                                      return updatedItems;
                                    }
                                  });

                                  if (isEmail) {
                                    setSelectedFile(null); // ÌååÏùº ÏÑ†ÌÉù Ìï¥Ï†ú
                                  }
                                }}
                                className="w-4 h-4"
                              />
                              <label
                                htmlFor="sendByEmail"
                                className="text-sm text-gray-500"
                              >
                                Ïù¥Î©îÏùºÎ°ú ÌååÏùº Î≥¥ÎÇºÍ≤åÏöî
                              </label>
                            </div>
                            {sendByEmail && (
                              <span className="text-gray-600 font-medium text-sm h-[3rem] w-full md:w-[20rem] sm:w-[14.4rem] placeholder:pl-4">
                                banner114@hanmail.net
                              </span>
                            )}
                            <p className="text-xs text-gray-500 mt-2">
                              * ÏÑ†ÌÉùÌïú Î∞©ÏãùÍ≥º Í¥ÄÍ≥ÑÏóÜÏù¥ Í≤∞Ï†ú ÏôÑÎ£å ÌõÑ ÏãúÏïàÍ¥ÄÎ¶¨
                              ÌéòÏù¥ÏßÄÏóêÏÑú ÏãúÏïàÏùÑ ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§.
                            </p>
                          </div>
                        </div>
                      </div>

                      {/* ÏÑ∏Í∏àÍ≥ÑÏÇ∞ÏÑú */}
                      <div className="flex flex-col sm:flex-col md:flex-row items-start md:items-center gap-2 md:gap-4 sm:gap-2">
                        <label className="w-full md:w-[9rem] text-gray-600 font-medium">
                          ÏÑ∏Í∏àÍ≥ÑÏÇ∞ÏÑú
                        </label>
                        <div className="flex items-center gap-2">
                          <input
                            type="checkbox"
                            checked={taxInvoice}
                            onChange={(e) => setTaxInvoice(e.target.checked)}
                            className="w-5 h-5 sm:w-4 sm:h-4"
                          />
                          <label className="text-gray-600 font-medium sm:text-0.875">
                            ÏÑ∏Í∏àÍ≥ÑÏÇ∞ÏÑú Ïã†Ï≤≠
                          </label>
                        </div>
                      </div>
                    </div>
                  </form>
                </div>
              </section>
              {/* ÎèôÏùòÏÑú */}
              <section className="flex flex-col gap-2">
                <div>
                  <div className="flex flex-col gap-2">
                    <div>
                      <div className="text-blue-500">
                        ‚óã ÌòÑÏàòÎßâ ÌëúÏãúÎÇ¥Ïö©Ïùò Í∏àÏßÄ, Ï†úÌïúÏÇ¨Ìï≠
                      </div>
                      <ul>
                        <li>
                          ÏÑ±Ï†ÅÏù∏ ÌëúÌòÑ ÏïîÏãú, Ïù∏Í∂åÏπ®Ìï¥(Íµ≠Ï†úÍ≤∞Ìòº, --- Ïã†Î∂Ä Îì±)
                        </li>
                        <li>
                          ÏùåÎûÄ, Ìá¥ÌèêÏÑ± Î∞è Ï≤≠ÏÜåÎÖÑ Î≥¥Ìò∏, ÏÑ†ÎèÑÏóê Ï†ÄÌï¥ Ïö∞Î†§Í∞Ä ÏûàÎäî
                          ÎÇ¥Ïö©
                        </li>
                        <li>
                          ÏÇ¨Ï±Ñ, ÎåÄÎ∂ÄÏóÖ, Ï±ÑÍ∂åÏ∂îÏã¨Îì±Ïù¥ Í¥ÄÎ†®Îêú ÎÇ¥Ïö©, ÏãúÎØºÏ†ïÏÑúÏóê
                          Ï†ÅÌï©ÌïòÏßÄ ÏïäÏùÄ ÎÇ¥Ïö©
                        </li>
                        <li>
                          ÌäπÏ†ï Í∞úÏù∏, Îã®Ï≤¥ Îì±Ïùò Í∞ÄÏπòÍ¥ÄÏùÑ ÎπÑÎ∞© ÎòêÎäî ÌôçÎ≥¥ÌïòÎ†§Îäî
                          ÎÇ¥Ïö©
                        </li>
                        <li>
                          Í∏∞ÌÉÄ Î∞òÏÇ¨ÌöåÏ†Å ÎÇ¥Ïö© ÎòêÎäî ÏãúÎØºÏ†ïÏÑúÏóê Ï†ÅÌï©ÌïòÏßÄ ÏïäÎã§Í≥†
                          ÌåêÎã®ÎêòÎäî ÎÇ¥Ïö©
                        </li>
                      </ul>
                    </div>
                  </div>
                  <div>
                    <div className="text-blue-500">
                      ‚óã ÌòÑÏàòÎßâÍ≤åÏãúÏùò ÏßÄÏó∞ ÎòêÎäî ÏùºÏãú Ï§ëÏßÄ
                    </div>
                    <ul>
                      <li>
                        Î≤ïÏ†ïÍ≥µÌú¥Ïùº ÎòêÎäî Í∞ïÌíç,Ïö∞Ï≤ú,Ìè≠ÏÑ§ ÏãúÏóêÎäî ÌòÑÏàòÎßâ Í≤åÏãúÏùºÏ†ïÏù¥
                        Ï†ÑÌõÑÎÇ†Î°ú Î≥ÄÍ≤Ω Îê† Ïàò ÏûàÏäµÎãàÎã§.{' '}
                      </li>
                      <li>
                        ÌòÑÏàòÎßâ Í≤åÏãú Í∏∞Í∞Ñ Ï§ë, ÌÉúÌíç,Ïû¨ÎÇúÍ∏¥Í∏â Í≥µÏÇ¨ Îì±Ïùò ÏÇ¨Ïú†Í∞Ä
                        Î∞úÏÉùÌï† ÎïåÏóêÎäî Í¥ëÍ≥†Ï£ºÏóêÍ≤å ÏÇ¨Ï†Ñ ÌÜµÎ≥¥ ÏóÜÏù¥ Í≤åÏãúÎ•º ÏùºÏãú Ï§ëÏßÄ
                        Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                      </li>
                    </ul>
                  </div>
                </div>
                <div className="text-red text-1 font-500 flex flex-col gap-2 items-center">
                  <span className="">[Ïú†ÏùòÏÇ¨Ìï≠]</span>
                  <div>
                    ÌòÑÏàòÎßâÍ≤åÏãúÎåÄ Ïã†Ï≤≠ Ïãú ÏïÑÎûò Í∑úÏïΩÏÇ¨Ìï≠ÏùÑ Î∞òÎìúÏãú ÏàôÏßÄÌïòÏãúÍ∏∞
                    Î∞îÎùºÎ©∞,
                    <br />
                    ÏàôÏßÄÌïòÏßÄ Î™ªÌïú Ï±ÖÏûÑÏùÄ Ïã†Ï≤≠Ïù∏ÏóêÍ≤å ÏûàÏäµÎãàÎã§. <br />
                    ÎòêÌïú Í¥ÄÎ†® Í∑úÏ†ïÏùÑ ÏúÑÎ∞òÌïú Í≤ΩÏö∞ÏóêÎèÑ Ïã†Ï≤≠ Î∞è Í≤åÏãúÎåÄÍ∞Ä
                    Î∂àÍ∞ÄÌï©ÎãàÎã§.
                  </div>
                </div>
                <div className="flex items-center gap-2 mt-4">
                  <input
                    type="checkbox"
                    id="agreeCaution"
                    checked={isAgreedCaution}
                    onChange={(e) => setIsAgreedCaution(e.target.checked)}
                    className="w-4 h-4"
                  />
                  <label
                    htmlFor="agreeCaution"
                    className="text-sm text-gray-700"
                  >
                    ÏúÑ Ïú†ÏùòÏÇ¨Ìï≠ÏùÑ Î™®Îëê ÏùΩÍ≥† ÎèôÏùòÌï©ÎãàÎã§.
                  </label>
                </div>
              </section>
            </div>
          ))}

          {/* Í≤∞Ï†úÏàòÎã® ÏÑ†ÌÉù */}
          {(() => {
            console.log(
              'üîç Î†åÎçîÎßÅ Ïãú selectedItems.length:',
              selectedItems.length
            );
            return selectedItems.length > 0;
          })() ? (
            <section className="p-6 bg-white rounded-lg shadow-md">
              <h3 className="text-1.25 font-700 mb-4 sm:text-1">Í≤∞Ï†úÏàòÎã®</h3>
              <div className="flex flex-col gap-3 items-center justify-center">
                <button
                  className={`hover:cursor-pointer border-solid rounded-[0.375rem] px-4 py-6 w-full text-1.25 font-700 sm:text-1 sm:py-4 ${
                    paymentMethod === 'card'
                      ? 'border-black border-[0.1rem] hover:bg-gray-3 text-black shadow-sm'
                      : 'border-gray-3 bg-gray-11'
                  }`}
                  onClick={() => {
                    console.log('üîç Ïã†Ïö©Ïπ¥Îìú Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
                    console.log('üîç ÌòÑÏû¨ paymentMethod:', paymentMethod);
                    console.log('üîç ÌÅ¥Î¶≠ ÌõÑ paymentMethod:', 'card');
                    setPaymentMethod('card');
                  }}
                >
                  Ïã†Ïö© ¬∑ Ï≤¥ÌÅ¨Ïπ¥Îìú
                </button>

                <button
                  className={`hover:cursor-pointer border-solid rounded-[0.375rem] px-4 py-6 w-full text-1.25 font-700 sm:text-1 sm:py-4 ${
                    paymentMethod === 'bank_transfer'
                      ? 'border-black border-[0.1rem] hover:bg-gray-3 text-black shadow-sm'
                      : 'border-gray-3 bg-gray-11'
                  }`}
                  onClick={() => {
                    console.log('üîç Í≥ÑÏ¢åÏù¥Ï≤¥ Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
                    console.log('üîç ÌòÑÏû¨ paymentMethod:', paymentMethod);
                    console.log('üîç ÌÅ¥Î¶≠ ÌõÑ paymentMethod:', 'bank_transfer');
                    setPaymentMethod('bank_transfer');
                  }}
                >
                  Í≥ÑÏ¢åÏù¥Ï≤¥
                </button>

                <div className="w-full flex flex-col sm:flex-row gap-4 items-center justify-between">
                  <button className="border border-gray-3 rounded-[0.375rem] p-4 w-full sm:h-[3rem] sm:flex sm:items-center sm:justify-center">
                    <Image
                      src="/svg/naver-pay.svg"
                      alt="Naver Pay"
                      width={80}
                      height={80}
                      className="sm:w-[3rem] sm:h-[3rem]"
                    />
                  </button>
                  <button className="border border-gray-3 rounded-[0.375rem] p-4 w-full sm:h-[3rem] sm:flex sm:items-center sm:justify-center">
                    <Image
                      src="/svg/kakao-pay.svg"
                      alt="Kakao Pay"
                      width={80}
                      height={80}
                      className="sm:w-[3rem] sm:h-[3rem]"
                    />
                  </button>
                </div>
              </div>

              {/* Í≥ÑÏ¢åÏù¥Ï≤¥ ÏÑ†ÌÉù Ïãú Í≥ÑÏ¢åÎ≤àÌò∏ ÌëúÏãú */}
              {paymentMethod === 'bank_transfer' && bankInfo && (
                <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <h4 className="font-semibold text-blue-800 mb-2">
                    ÏûÖÍ∏à Í≥ÑÏ¢å Ï†ïÎ≥¥ ({selectedItems[0]?.district || 'ÏÑ†ÌÉùÎêú Íµ¨'})
                  </h4>
                  <div className="text-blue-700">
                    <p>
                      <strong>ÏùÄÌñâ:</strong> {bankInfo.bank_name}
                    </p>
                    <p>
                      <strong>Í≥ÑÏ¢åÎ≤àÌò∏:</strong> {bankInfo.account_number}
                    </p>
                    <p>
                      <strong>ÏòàÍ∏àÏ£º:</strong> {bankInfo.depositor}
                    </p>
                  </div>
                  <p className="text-sm text-blue-600 mt-2">
                    * Í≥ÑÏ¢åÏù¥Ï≤¥Ïãú ÏûÖÍ∏àÏûêÎ™ÖÏùÑ Ï£ºÎ¨∏ÏûêÎ™ÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.
                  </p>
                </div>
              )}
            </section>
          ) : (
            <section className="p-6 bg-white rounded-lg shadow-md">
              <div className="flex flex-col items-center justify-center py-8">
                <div className="text-gray-500 text-lg font-medium mb-2">
                  Í≤∞Ï†ú ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§
                </div>
                <p className="text-gray-400 text-sm text-center mb-4">
                  Ïû•Î∞îÍµ¨ÎãàÏóêÏÑú ÏÉÅÌíàÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî
                </p>
                <Button
                  className="bg-black text-white px-6 py-2 rounded-lg hover:bg-gray-800"
                  onClick={() => router.push('/cart')}
                >
                  Ïû•Î∞îÍµ¨ÎãàÎ°ú Ïù¥Îèô
                </Button>
              </div>
            </section>
          )}

          {/* ÏäπÏù∏Îêú Ï£ºÎ¨∏ ÏïàÎÇ¥ Î©îÏãúÏßÄ */}
          {isApprovedOrder && (
            <section className="p-6 bg-blue-50 border border-blue-200 rounded-lg">
              <h3 className="text-1.25 font-700 mb-2 text-blue-800 sm:text-1">
                ÏäπÏù∏Îêú Ï£ºÎ¨∏
              </h3>
              <p className="text-sm text-blue-700">
                Ïñ¥ÎìúÎØº ÏäπÏù∏Ïù¥ ÏôÑÎ£åÎêú Ï£ºÎ¨∏ÏûÖÎãàÎã§. Í≤∞Ï†úÎ•º ÏôÑÎ£åÌïòÎ©¥ ÏãúÏïàÍ¥ÄÎ¶¨
                ÌéòÏù¥ÏßÄÏóêÏÑú ÏãúÏïàÏùÑ ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§.
              </p>
            </section>
          )}
        </div>

        {/* Ïö∞Ï∏° - Í≤∞Ï†ú ÏòÅÏó≠ */}
        <div className="w-full md:w-[24rem] space-y-6">
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="font-bold text-1.25 mb-4 border-b-sollid border-gray-1 pb-4 border-b-[2px]">
              ÏµúÏ¢Ö Í≤∞Ï†ú Í∏àÏï°
            </h3>
            <div className="flex flex-col gap-[0.88rem] text-1 font-500 text-gray-2">
              <div className="flex justify-between py-1">
                <span>ÎèÑÎ°úÏù¥Ïö©ÎπÑ</span>
                <span>{priceSummary.roadUsageFee.toLocaleString()}Ïõê</span>
              </div>
              <div className="flex justify-between py-1">
                <span>Í¥ëÍ≥†ÎåÄÌñâÎπÑ</span>
                <span>{priceSummary.advertisingFee.toLocaleString()}Ïõê</span>
              </div>
              <div className="flex justify-between py-1">
                <span>ÏàòÏàòÎ£å</span>
                <span>{priceSummary.taxPrice.toLocaleString()}Ïõê</span>
              </div>
            </div>
            <div className="flex justify-between items-center mt-4 border-t border-gray-1 pt-7 sm:flex-col sm:gap-4">
              <span className="text-1.25 font-900">ÏµúÏ¢ÖÍ≤∞Ï†úÍ∏àÏï°</span>
              <span className="text-1.875 font-900">
                {priceSummary.totalPrice.toLocaleString()}{' '}
                <span className="text-1 font-400">Ïõê</span>
              </span>
            </div>
          </div>

          {/* Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏóêÎü¨ Î©îÏãúÏßÄ */}
          {(validationErrors.projectName ||
            validationErrors.fileUpload ||
            validationErrors.agreement) && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 space-y-2">
              {validationErrors.projectName && (
                <div className="text-red-600 text-sm">
                  ‚Ä¢ {validationErrors.projectName}
                </div>
              )}
              {validationErrors.fileUpload && (
                <div className="text-red-600 text-sm">
                  ‚Ä¢ {validationErrors.fileUpload}
                </div>
              )}
              {validationErrors.agreement && (
                <div className="text-red-600 text-sm">
                  ‚Ä¢ {validationErrors.agreement}
                </div>
              )}
            </div>
          )}

          <button
            className={`w-full py-6 rounded-lg transition-colors hover:cursor-pointer ${
              isProcessing ||
              Object.values(validationErrors).some((error) => error !== '')
                ? 'bg-gray-400 text-gray-600 cursor-not-allowed'
                : 'bg-black text-white hover:bg-gray-800'
            }`}
            disabled={
              isProcessing ||
              Object.values(validationErrors).some((error) => error !== '')
            }
            onClick={() => {
              if (paymentMethod === 'bank_transfer') {
                setShowBankTransferModal(true);
              } else {
                handlePayment();
              }
            }}
          >
            <span className="text-white sm:text-1.25 ">
              {isProcessing
                ? 'Ï≤òÎ¶¨Ï§ë...'
                : paymentMethod === 'bank_transfer'
                ? 'ÏûÖÍ∏àÎåÄÍ∏∞ Ïã†Ï≤≠'
                : 'Í≤∞Ï†úÌïòÍ∏∞'}
            </span>
          </button>
        </div>
      </div>

      {/* Í≥ÑÏ¢åÏù¥Ï≤¥ Î™®Îã¨ */}
      {showBankTransferModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold mb-4">Í≥ÑÏ¢åÏù¥Ï≤¥ ÏïàÎÇ¥</h3>
            <div className="mb-6">
              <p className="text-gray-700 mb-4">
                Í≥ÑÏ¢åÏù¥Ï≤¥ ÌõÑ Ï£ºÎ¨∏ÎÇ¥Ïó≠ÏóêÏÑú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.
              </p>
              {bankInfo && (
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="font-semibold mb-2">ÏûÖÍ∏à Í≥ÑÏ¢å Ï†ïÎ≥¥</p>
                  <p className="text-sm text-gray-600">
                    ÏùÄÌñâ: {bankInfo.bank_name}
                  </p>
                  <p className="text-sm text-gray-600">
                    Í≥ÑÏ¢åÎ≤àÌò∏: {bankInfo.account_number}
                  </p>
                  <p className="text-sm text-gray-600">
                    ÏòàÍ∏àÏ£º: {bankInfo.depositor}
                  </p>
                </div>
              )}
            </div>
            <div className="flex gap-4">
              <button
                className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded hover:bg-gray-400"
                onClick={() => setShowBankTransferModal(false)}
              >
                Ï∑®ÏÜå
              </button>
              <button
                className="flex-1 bg-black text-white py-2 px-4 rounded hover:bg-gray-800"
                onClick={() => {
                  setShowBankTransferModal(false);
                  handlePayment();
                }}
              >
                Í≤∞Ï†úÌïòÍ∏∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Í≤∞Ï†ú ÏôÑÎ£å Î™®Îã¨ */}
      <PaymentSuccessModal
        isOpen={showPaymentSuccessModal}
        onClose={() => setShowPaymentSuccessModal(false)}
        orderNumber={paymentSuccessData.orderNumber}
        totalAmount={paymentSuccessData.totalAmount}
      />
    </main>
  );
}

export default function PaymentPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <PaymentPageContent />
    </Suspense>
  );
}
