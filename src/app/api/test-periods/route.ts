import { NextResponse } from 'next/server';
import { supabase } from '@/src/lib/supabase';

export async function GET() {
  try {
    console.log('üîç Checking all periods for Í¥ÄÏïÖÍµ¨...');

    // 1. banner_displayÏùò display_type_id Ï∞æÍ∏∞
    const { data: typeData, error: typeError } = await supabase
      .from('display_types')
      .select('id, name')
      .eq('name', 'banner_display')
      .single();

    if (typeError || !typeData) {
      console.error('‚ùå Error finding banner_display type:', typeError);
      return NextResponse.json(
        { success: false, error: 'banner_display ÌÉÄÏûÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' },
        { status: 404 }
      );
    }

    console.log('‚úÖ banner_display type found:', typeData);

    // 2. Í¥ÄÏïÖÍµ¨Ïùò region_gu_id Ï∞æÍ∏∞ (banner_displayÏö©)
    const { data: guData, error: guError } = await supabase
      .from('region_gu')
      .select('id, name')
      .eq('name', 'Í¥ÄÏïÖÍµ¨')
      .eq('display_type_id', typeData.id)
      .single();

    if (guError || !guData) {
      console.error('‚ùå Error finding Í¥ÄÏïÖÍµ¨:', guError);
      return NextResponse.json(
        { success: false, error: 'Í¥ÄÏïÖÍµ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' },
        { status: 404 }
      );
    }

    console.log('‚úÖ Í¥ÄÏïÖÍµ¨ found:', guData);

    // 3. Í¥ÄÏïÖÍµ¨Ïùò Î™®Îì† Í∏∞Í∞Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÌïÑÌÑ∞ ÏóÜÏù¥)
    const { data: allPeriods, error: periodError } = await supabase
      .from('region_gu_display_periods')
      .select('*')
      .eq('region_gu_id', guData.id)
      .eq('display_type_id', typeData.id)
      .order('period_from', { ascending: true });

    if (periodError) {
      console.error('‚ùå Error fetching periods:', periodError);
      return NextResponse.json(
        { success: false, error: 'Í∏∞Í∞Ñ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.' },
        { status: 500 }
      );
    }

    console.log('‚úÖ All periods for Í¥ÄÏïÖÍµ¨:', allPeriods);

    // 4. ÌòÑÏû¨ ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú 7Ïùº ÌõÑ Í≥ÑÏÇ∞
    const now = new Date();
    const koreaTime = new Date(now.getTime() + 9 * 60 * 60 * 1000);
    const sevenDaysLater = new Date(
      koreaTime.getTime() + 7 * 24 * 60 * 60 * 1000
    );

    const formatDate = (date: Date) => {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    };

    console.log('üîç Current date (Korea):', formatDate(koreaTime));
    console.log('üîç 7 days later:', formatDate(sevenDaysLater));

    // 5. 7Ïùº ÌõÑÎ∂ÄÌÑ∞ ÏãúÏûëÌïòÎäî Í∏∞Í∞ÑÎì§Îßå ÌïÑÌÑ∞ÎßÅ
    const availablePeriods =
      allPeriods?.filter(
        (period) => period.period_from >= formatDate(sevenDaysLater)
      ) || [];

    console.log('üîç Available periods (7+ days away):', availablePeriods);

    return NextResponse.json({
      success: true,
      data: {
        guData,
        typeData,
        allPeriods,
        currentDate: formatDate(koreaTime),
        sevenDaysLater: formatDate(sevenDaysLater),
        availablePeriods,
      },
    });
  } catch (error) {
    console.error('‚ùå Error:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}
