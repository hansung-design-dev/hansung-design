import { NextResponse } from 'next/server';
import { supabase } from '@/src/lib/supabase';

export async function GET() {
  try {
    console.log('üîç Checking all periods for ÎßàÌè¨Íµ¨...');

    // 1. banner_displayÏùò display_type_id Ï∞æÍ∏∞
    const { data: typeData, error: typeError } = await supabase
      .from('display_types')
      .select('id, name')
      .eq('name', 'banner_display')
      .single();

    if (typeError || !typeData) {
      console.error('‚ùå Error finding banner_display type:', typeError);
      return NextResponse.json(
        { success: false, error: 'banner_display ÌÉÄÏûÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' },
        { status: 404 }
      );
    }

    console.log('‚úÖ banner_display type found:', typeData);

    // 2. ÎßàÌè¨Íµ¨Ïùò region_gu_id Ï∞æÍ∏∞ (banner_displayÏö©)
    const { data: guData, error: guError } = await supabase
      .from('region_gu')
      .select('id, name')
      .eq('name', 'ÎßàÌè¨Íµ¨')
      .eq('display_type_id', typeData.id)
      .single();

    if (guError || !guData) {
      console.error('‚ùå Error finding ÎßàÌè¨Íµ¨:', guError);
      return NextResponse.json(
        { success: false, error: 'ÎßàÌè¨Íµ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' },
        { status: 404 }
      );
    }

    console.log('‚úÖ ÎßàÌè¨Íµ¨ found:', guData);

    // 3. ÎßàÌè¨Íµ¨Ïùò Î™®Îì† Í∏∞Í∞Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÌïÑÌÑ∞ ÏóÜÏù¥)
    const { data: allPeriods, error: periodError } = await supabase
      .from('region_gu_display_periods')
      .select('*')
      .eq('region_gu_id', guData.id)
      .eq('display_type_id', typeData.id)
      .order('period_from', { ascending: true });

    if (periodError) {
      console.error('‚ùå Error fetching periods:', periodError);
      return NextResponse.json(
        { success: false, error: 'Í∏∞Í∞Ñ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.' },
        { status: 500 }
      );
    }

    console.log('‚úÖ All periods for ÎßàÌè¨Íµ¨:', allPeriods);

    // 4. ÌòÑÏû¨ ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú 7Ïùº ÌõÑ Í≥ÑÏÇ∞
    const now = new Date();
    const koreaTime = new Date(now.getTime() + 9 * 60 * 60 * 1000);
    const currentDate = koreaTime.toISOString().split('T')[0];

    // 7Ïùº ÌõÑ ÎÇ†Ïßú Í≥ÑÏÇ∞
    const sevenDaysLater = new Date(
      koreaTime.getTime() + 7 * 24 * 60 * 60 * 1000
    );
    const sevenDaysLaterStr = sevenDaysLater.toISOString().split('T')[0];

    console.log('üîç Current date (Korea time):', currentDate);
    console.log('üîç Seven days later:', sevenDaysLaterStr);

    // 5. 7Ïùº Ï†Ñ ÎßàÍ∞ê Î°úÏßÅ Ï†ÅÏö©
    const availablePeriods =
      allPeriods?.filter((period) => {
        const periodStart = new Date(period.period_from);
        const daysUntilPeriod = Math.ceil(
          (periodStart.getTime() - koreaTime.getTime()) / (1000 * 60 * 60 * 24)
        );

        console.log(
          `üîç Period ${period.period_from} - ${period.period_to}: ${daysUntilPeriod} days until start`
        );

        // 7Ïùº Ïù¥ÏÉÅ ÎÇ®ÏïòÏúºÎ©¥ Ïã†Ï≤≠ Í∞ÄÎä•
        return daysUntilPeriod >= 7;
      }) || [];

    console.log('‚úÖ Available periods after 7-day filter:', availablePeriods);

    // 6. ÏµúÎåÄ 2Í∞ú Í∏∞Í∞Ñ ÏÑ†ÌÉù
    const selectedPeriods = availablePeriods.slice(0, 2);

    return NextResponse.json({
      success: true,
      data: {
        guData,
        typeData,
        allPeriods,
        currentDate,
        sevenDaysLater: sevenDaysLaterStr,
        availablePeriods,
        selectedPeriods,
      },
    });
  } catch (error) {
    console.error('‚ùå Error in test-mapo-periods API:', error);
    return NextResponse.json(
      {
        success: false,
        error:
          error instanceof Error ? error.message : 'Unknown error occurred',
      },
      { status: 500 }
    );
  }
}
